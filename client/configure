#!/bin/bash
set -u

# Run this script to configure the appliation for the current platform.
# The bash version is for Ubuntu/Debian, CentOS/RHEL, and Mac OSX.

config="config.h"

echo "Generating config.h..."

echo '// This file is automatically generated by the configure script.' > ${config}
echo '// Any changes made here will be overwritten next time the script is run.' >> ${config}

echo '#ifndef _FOREST_CONFIG_H' >> ${config}
echo '#define _FOREST_CONFIG_H' >> ${config}
echo '#define CONFIG_FILE_PATH "/etc/forest-client.conf"' >> ${config}
echo '#define DEFAULT_SERVER_URL "http://forest/forest"' >> ${config}

# Detect what OS we're on and set reasonable config options.
if which apt-get &> /dev/null; then
	echo "Detected Ubuntu/Debian OS"
	# Ubuntu/Debian use apt-get
	echo "#define PACKAGE_MANAGER AptCli" >> ${config}
	echo "#define REBOOT_MANAGER FilePresence" >> ${config}
elif which yum &> /dev/null; then
	echo "Detected Red Hat based OS"
	# RHEL, CentOS, Fedora, etc. use yum
	echo "#define PACKAGE_MANAGER Yum" >> ${config}
	echo "#define REBOOT_MANAGER KernelDifference" >> ${config}
elif [ `uname -s` = "Darwin" ] ; then
	echo "Detected Mac OSX"
	# MacOS
	echo "#define PACKAGE_MANAGER MacSU" >> ${config}
	# no reboot manager yet
	echo "#define REBOOT_MANAGER RebootStub" >> ${config}
else
	echo "Unable to detect OS, please generate config.h manually!"
fi

echo "#endif" >> ${config}

# Makefile
echo "Generating Makefile..."

echo '# This file is automatically generated by the configure script.' > Makefile
echo '# Any changes made here will be overwritten next time the script is run.' >> Makefile

echo 'CXX = g++' >> Makefile
echo 'DEBUG = -g' >> Makefile
# Test for c++11 support
echo 'int main(int argc, const char* argv[]){return 0;}' > g++test.cpp
g++ -c --std=c++11 g++test.cpp 
if [ "$?" = "0" ]; then
	echo "g++ seems to support C++ 11"
	echo 'CXXFLAGS = -std=c++11 -pedantic -Wall' >> Makefile
else
	echo "g++ doesn't seem to support C++11, fall back to C++0x"
	echo "NOTE: Using C++0x may have unintended side effects!"
	echo 'CXXFLAGS = -std=c++0x -pedantic -Wall' >> Makefile
fi
rm -f g++test.cpp g++test.o
echo 'COMPILE = $(CXX) $(CXXFLAGS) -c' >> Makefile
echo 'LINK = $(CXX) $(CXXFLAGS)' >> Makefile
echo '' >> Makefile
echo 'OBJFILES := $(patsubst %.cpp,obj/%.o,$(wildcard *.cpp))' >> Makefile
echo '' >> Makefile
echo 'all: Release' >> Makefile
echo 'Release: bin/forest-client' >> Makefile
echo 'Debug: CXXFLAGS += $(DEBUG)' >> Makefile
echo 'Debug: bin/forest-client' >> Makefile
echo 'cleanDebug: clean' >> Makefile
echo 'cleanRelease: clean' >> Makefile
echo '' >> Makefile
echo 'bin/forest-client: $(OBJFILES)' >> Makefile
echo '	[ -d bin ] || mkdir bin' >> Makefile
echo '	$(LINK) $(OBJFILES) -lcurl -o bin/forest-client' >> Makefile
echo '' >> Makefile
echo 'obj/%.o: %.cpp' >> Makefile
echo '	[ -d obj ] || mkdir obj' >> Makefile
echo '	$(COMPILE) -o $@ $<' >> Makefile
echo 'clean:' >> Makefile
echo '	rm obj/*.o bin/forest-client' >> Makefile

echo "Configuration complete."

