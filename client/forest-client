#!/bin/sh

# set environemt stuff
# PATH should contain at least /usr/local/sbin, /usr/sbin and /sbin
PATH=$PATH:/usr/local/sbin:/usr/sbin:/sbin
# some parts of apt-get seem to need term set to something
TERM=dumb

# global variables
rpc_version="1"
current_distro=""
# detect which distro we're on so we know what commands to run
if [ -f /etc/lsb-release ] ; then
	current_distro="ubuntu"
elif [ -f /etc/redhat-release ] ; then
	current_distro="centos"
fi

# This function does not output anything if there are no packages to update or
# if the distribution cannot be detected.
get_available_updates ()
{
	if [ "x$current_distro" = xubuntu ] ; then
		#for ubuntu
		updates=`apt-get dist-upgrade -Vs 2>/dev/null |grep ^Inst | cut -d " " -f 2`
		echo $updates
	elif [ "x$current_distro" = xcentos ] ; then
		#for centos
		updates=`yum check-update -q 2>/dev/null | grep -v " \* \|^$" | cut -d " " -f 1 | cut -d "." -f 1 | uniq`
		echo $updates
	fi
}

# Replaces spaces with commas
spaces_to_commas ()
{
	echo $1 | sed 's/ \+/,/g'
}

# Returns true if a reboot is needed, false otherwise
is_reboot_needed()
{
	if [ "x$current_distro" = "xubuntu" ]; then
		if [ -f /var/run/reboot-required ]; then
			echo "true"
		else
			echo "false"
		fi
	elif [ "x$current_distro" = "xcentos" ]; then
		# I assume that a kernel is the only thing that would require a
		# reboot. There could be other things that need it as well.
		running_kernel=`uname -a |cut -d " " -f 3`
		newest_kernel=`yum -q list kernel | grep "installed" | awk -F" " '{ print $2 }' | sort -n -s | sed '$!d'`
		if [ "x$running_kernel" != "x$newest_kernel"  ]; then
			echo "true"
		else
			echo "false"
		fi
	else
		echo "unknown"
	fi
}

# Invokes package manager to do updates on selected packages.
# Takes a space separated list of packages.
do_updates()
{
	if [ "x$current_distro" = "xubuntu" ]; then
		results=`apt-get -q -y -o DPkg::Options::\=--force-confold install $1 2>&1`
		if [ $? -ne 0 ]; then
			echo "apt-get install did not execute successfully"
			echo $results
		fi
	elif [ "x$current_distro" = "xcentos" ]; then
		results=`yum -y update $1 2>&1`
		if [ $? -ne 0 ]; then
			echo "yum update did not execute successfully"
			echo $results
		fi
	fi
}

# default server url in case config file is missing
server_url="http://forest/forest"
# include config file
. /etc/forest-client.conf

# build urls to use for posting and getting data
post_url="$server_url/collect.php"
accepted_url="$server_url/getaccepted.php?rpc_version=$rpc_version&system=`hostname`"

# check for accepted updates and apply them
accepted_updates=`curl --silent --show-error $accepted_url`
# quit here silently if curl can't connect
if [ $? -ne 0 ]; then
	exit 0
fi

error_check=`echo $accepted_updates | cut -d ":" -f 1`
# quit here if there was an error getting accepted updates
if [ "x$error_check" != "xdata_ok" ]; then
	echo "error getting accepted packages: $accepted_updates"
	exit 1
fi

# filter out error status
accepted_updates=`echo "$accepted_updates" | cut -d " " -f 2-`

# only try to apply updates if the list isn't empty
if [ "x$accepted_updates" != "x" ]; then
	do_updates "$accepted_updates"
fi

# collect packages available for update and report them
formatted_system_name="system_name=`hostname`"
updates=`get_available_updates`
if [ "x$updates" != "x" ]; then
	updates=`spaces_to_commas "$updates"`
	formatted_updates="available_updates=$updates"
else
	formatted_updates="no_updates_available=true"
fi

formatted_reboot="reboot_required=`is_reboot_needed`"

formatted_rpc_version="rpc_version=$rpc_version"

curldata=`curl --silent --show-error --data "$formatted_rpc_version" --data "$formatted_system_name" --data "$formatted_updates" --data "$formatted_reboot" $post_url`

# filter out success messege and return value of grep to avoid cron warning messages
if [ "x$1" = "x--cron" ]; then
	curldata=`echo "$curldata" | grep -v "data_ok"`
fi

# output anything from curl that hasn't been filtered
if [ "x" != "x$curldata" ]; then
	echo $curldata
fi
